// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id             String   @id
  oldId          String?  // Store the original hashed ID here
  document       Json     // The full JSON document
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Document metadata
  documentUrl       String?
  processingDate    DateTime?
  pageCount         Int?
  title             String?
  summary           String?  @db.Text
  fullText          String?  @db.Text
  documentType      String?  // Legacy field (for backward compatibility)
  documentGroup     String?  // New field for consistent terminology
  
  // Arrays for data storage (not indexed)
  allNames          String[]
  allPlaces         String[]
  allDates          String[]
  allObjects        String[]
  stamps            String[]
  
  // Search field - concatenated text for full-text search
  searchText        String?  @db.Text
  
  // Normalized dates for range searching
  normalizedDates   DateTime[]
  earliestDate      DateTime?
  latestDate        DateTime?
  
  // Boolean flags for quick filtering
  hasHandwrittenNotes Boolean @default(false)
  hasStamps          Boolean @default(false)
  hasFullText        Boolean @default(false)
  
  // Processing status tracking
  processingStage    String?  // 'pending', 'downloading', 'processing', 'completed', 'failed'
  processingSteps    String[] // Array of completed steps: 'download', 'conversion', 'analysis', 'publishing', 'complete'
  lastProcessed      DateTime?
  processingError    String?  @db.Text
  archiveId          String?  // References the external archive ID for this document
  
  // References to related models
  pages            Page[]
  handwrittenNotes HandwrittenNote[]
  documentStamps   DocumentStamp[]
  
  // Efficient indexes (keeping only what's necessary)
  @@index([documentType])
  @@index([documentGroup])
  @@index([hasHandwrittenNotes])
  @@index([hasStamps])
  @@index([hasFullText])
  @@index([earliestDate, latestDate])
  @@index([processingStage])
  @@index([archiveId])
}

model Page {
  id           String   @id @default(cuid())
  documentId   String
  pageNumber   Int
  imagePath    String
  summary      String?  @db.Text
  fullText     String?  @db.Text
  hasImage     Boolean  @default(false)
  hasText      Boolean  @default(false)
  processedAt  DateTime?
  
  // Relation to parent document
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint
  @@unique([documentId, pageNumber])
  @@index([pageNumber])
  @@index([hasImage])
  @@index([hasText])
}

model HandwrittenNote {
  id           String   @id @default(cuid())
  documentId   String
  pageNumber   Int
  content      String   @db.Text
  location     String?
  
  // Relation to parent document
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId, pageNumber])
  @@index([content])
}

model DocumentStamp {
  id           String   @id @default(cuid())
  documentId   String
  pageNumber   Int
  type         String?
  date         String?
  text         String
  
  // Relation to parent document
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId, pageNumber])
  @@index([type])
  @@index([date])
  @@index([text])
}

model NewsSource {
  id          String   @id @default(cuid())
  name        String   @unique
  url         String   // Main URL from JSON
  icon        String?  // URL to the source's icon/logo
  
  // Selectors as JSONB to store the entire selectors object
  selectors   Json?    // Will store: {"linkFilter": "a[href*=\"/politics/\"]", ...}
  
  // Status fields
  isActive    Boolean  @default(true)
  isDisabled  Boolean  @default(false) // For sources in "disabled" array
  reason      String?  // Reason why disabled (for disabled sources)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Future relationship (when you add Article model)
  // articles    Article[]
  
  @@index([name])
  @@index([isActive])
  @@index([isDisabled])
  NewsArticle NewsArticle[]
  Post        Post[]
}

model NewsArticle {
  id          String   @id @default(cuid())
  sourceId    String
  title       String
  url         String   @unique
  summary     String?  @db.Text
  publishedAt DateTime?
  
  // Future fields for full-text search, etc.
  fullText    String?  @db.Text
  
  // Relation to NewsSource
  source      NewsSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  // Relation to ArticleMedia
  media       ArticleMedia[]
  
  @@index([sourceId])
  @@index([title])
}

model ArticleMedia {
  id          String      @id @default(cuid())
  articleId   String
  url         String
  title       String?
  caption     String?     @db.Text
  type        MediaType
  createdAt   DateTime    @default(now())
  
  // Relation to NewsArticle
  article     NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@index([articleId])
  @@index([type])
}

enum MediaType {
  VIDEO
  IMAGE
}

model Post {
  id          String   @id @default(cuid())
  sourceId    String
  name        String
  date        DateTime
  description String?  @db.Text
  webUrl      String?
  nsfw        Boolean  @default(false)
  tagItems    String[]
  post        Json?
  blockchain  String

  source      NewsSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([date])
  @@index([blockchain])
}